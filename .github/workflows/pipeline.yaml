name: Deploy Lambda

on:
  workflow_dispatch:
    inputs:
      deployType:
        description: 'Deploy type'
        type: choice
        options:
          - deploy
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get RDS Endpoint from SSM
        id: get-endpoint
        run: |
          echo "Make sure to run tech-challenge-database terraform first"
          echo "If not, this step will break"
          response=$(aws secretsmanager get-secret-value --secret-id tech-challenge-user-aws-rds-endpoint --query 'SecretString' --output text --region us-east-1)
          if [ $? -ne 0 ]; then
            exit 1
          fi
          echo "AWS_RDS_URI=$response" >> $GITHUB_ENV

      - name: Get AWS Account ID
        id: get-account-id
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV

      - name: Build and package Lambdas
        env:
          DB_USER: ${{ vars.TC_USER_DB_POSTGRES_USERNAME }}
          DB_DATABASE: ${{ vars.TC_USER_DB_POSTGRES_DATABASE }}
          DB_PASSWORD: ${{ secrets.TC_USER_DB_POSTGRES_PASSWORD }}
          DB_PORT: ${{ vars.DB_PORT }}}
          DB_AWS_HOST: ${{ env.AWS_RDS_URI }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
        run: |
          sh ./scripts/build.sh
          sh ./scripts/deploy.sh
